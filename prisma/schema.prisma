generator client {
  provider     = "prisma-client-js"
  output       = "../build/generated/prisma/client"
  moduleFormat = "esm"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Enums moved to top for better organization
enum Role {
  MODERATOR
  MANAGER
}

enum InfractionType {
  BLACKLIST
  WARNING
}

enum InfractionStatus {
  ACTIVE
  REVOKED
  APPEALED
}

enum AppealStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum BlockWordAction {
  BLOCK_MESSAGE
  BLACKLIST
  SEND_ALERT
}

enum CallRatingStatus {
  LIKE
  DISLIKE
}

// Models
model Hub {
  id                  String   @id @default(cuid())
  name                String   @unique
  description         String
  ownerId             String
  owner               User     @relation("OwnedHubs", fields: [ownerId], references: [id])
  iconUrl             String
  bannerUrl           String?
  welcomeMessage      String?
  private             Boolean  @default(true)
  locked              Boolean  @default(false)
  appealCooldownHours Int      @default(168)
  lastActive          DateTime @default(now())
  settings            Int
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relations
  rules            String[]
  rulesAcceptances HubRulesAcceptance[]
  moderators       HubModerator[]
  connections      Connection[]
  tags             Tag[]
  upvotes          HubUpvote[]
  reviews          HubReview[]
  logConfig        HubLogConfig?
  blockWords       BlockWord[]
  infractions      Infraction[]
  invites          HubInvite[]
  userId           String?

  @@index([ownerId])
}

model Tag {
  id    String @id @default(cuid())
  name  String @unique
  hubs  Hub[]
}

model HubUpvote {
  id        String   @id @default(cuid())
  hubId     String
  hub       Hub      @relation(fields: [hubId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())

  @@unique([hubId, userId])
  @@index([userId])
}

model HubReview {
  id        String   @id @default(cuid())
  hubId     String
  hub       Hub      @relation(fields: [hubId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  rating    Int
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([hubId, userId])
  @@index([userId])
}

model HubModerator {
  id     String @id @default(cuid())
  hubId  String
  hub    Hub    @relation(fields: [hubId], references: [id], onDelete: Cascade)
  userId String
  user   User   @relation(fields: [userId], references: [id])
  role   Role

  @@unique([hubId, userId])
  @@index([userId])
}

model Connection {
  id                   String     @id @default(cuid())
  channelId            String     @unique
  parentId             String? // Parent channel ID for threads
  serverId             String
  server               ServerData @relation(fields: [serverId], references: [id])
  hubId                String
  hub                  Hub        @relation(fields: [hubId], references: [id], onDelete: Cascade)
  connected            Boolean    @default(true)
  compact              Boolean    @default(false)
  invite               String?
  createdAt            DateTime   @default(now())
  embedColor           String?
  webhookURL           String
  lastActive           DateTime   @default(now())
  joinRequestsDisabled Boolean    @default(false)

  @@unique([channelId, serverId])
  @@unique([hubId, serverId])
  @@index([hubId, channelId])
}

model Infraction {
  id          String           @id @default(nanoid(10))
  hubId       String
  type        InfractionType   @default(BLACKLIST)
  status      InfractionStatus @default(ACTIVE)
  moderator   User             @relation(name: "issuedInfractions", fields: [moderatorId], references: [id])
  moderatorId String
  reason      String
  expiresAt   DateTime?
  notified    Boolean          @default(false)

  // For user infractions
  user   User?   @relation(name: "infractions", fields: [userId], references: [id])
  userId String?

  // For server infractions
  serverId   String?
  serverName String?

  hub          Hub         @relation(fields: [hubId], references: [id])
  appeals      Appeal[]
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  ServerData   ServerData? @relation(fields: [serverDataId], references: [id])
  serverDataId String?

  @@index([status, hubId])
}

model Appeal {
  id           String       @id @default(cuid())
  infractionId String
  infraction   Infraction   @relation(fields: [infractionId], references: [id])
  userId       String
  user         User         @relation(fields: [userId], references: [id])
  reason       String
  status       AppealStatus @default(PENDING)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  @@index([infractionId])
  @@index([userId])
  @@index([status])
}

model BlockWord {
  id        String   @id @default(cuid())
  hubId     String
  hub       Hub      @relation(fields: [hubId], references: [id], onDelete: Cascade)
  name      String
  createdBy String
  creator   User     @relation(fields: [createdBy], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  words   String // seperated by comma (,)
  actions BlockWordAction[]

  @@unique([hubId, name])
  @@index([hubId])
}

model HubLogConfig {
  id                     String  @id @default(cuid())
  hubId                  String  @unique
  hub                    Hub     @relation(fields: [hubId], references: [id], onDelete: Cascade)
  modLogsChannelId       String?
  modLogsRoleId          String?
  joinLeavesChannelId    String?
  joinLeavesRoleId       String?
  appealsChannelId       String?
  appealsRoleId          String?
  reportsChannelId       String?
  reportsRoleId          String?
  networkAlertsChannelId String?
  networkAlertsRoleId    String?
}

model HubInvite {
  code    String   @id @default(nanoid(10)) @map("_id")
  hubId   String
  hub     Hub      @relation(fields: [hubId], references: [id], onDelete: Cascade)
  expires DateTime

  @@index([hubId])
  @@index([code])
}

model HubRulesAcceptance {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  hubId      String
  hub        Hub      @relation(fields: [hubId], references: [id], onDelete: Cascade)
  acceptedAt DateTime @default(now())

  @@unique([userId, hubId])
}

model User {
  id                String         @id
  name              String?
  showBadges        Boolean        @default(true)
  image             String?
  locale            String?
  voteCount         Int            @default(0)
  reputation        Int            @default(0)
  lastVoted         DateTime?
  banReason         String?
  mentionOnReply    Boolean        @default(true)
  acceptedRules     Boolean        @default(false)
  messageCount      Int            @default(0)
  lastMessageAt     DateTime       @default(now())
  modPositions      HubModerator[]
  inboxLastReadDate DateTime?      @default(now())
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

  // Relations
  ownedHubs         Hub[]                @relation("OwnedHubs")
  appeals           Appeal[]
  infractions       Infraction[]         @relation("infractions")
  issuedInfractions Infraction[]         @relation("issuedInfractions")
  upvotedHubs       HubUpvote[]
  reputationLog     ReputationLog[]
  reviews           HubReview[]
  blockWordsCreated BlockWord[]
  rulesAcceptances  HubRulesAcceptance[]
  ratingsMade       CallRating[]         @relation("RatingsMade")
  ratingsReceived   CallRating[]         @relation("RatingsReceived")
}

model Announcement {
  id           String   @id @default(cuid())
  title        String
  content      String
  thumbnailUrl String?
  imageUrl     String?
  createdAt    DateTime @default(now())
}

model ServerData {
  id            String   @id
  name          String?
  iconUrl       String?
  inviteCode    String?
  messageCount  Int      @default(0)
  premiumStatus Boolean  @default(false)
  lastMessageAt DateTime @default(now())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  connections Connection[]
  infractions Infraction[]
}

model CallRating {
  id        String           @id @default(cuid())
  callId    String
  raterId   String
  rater     User             @relation("RatingsMade", fields: [raterId], references: [id])
  targetId  String
  target    User             @relation("RatingsReceived", fields: [targetId], references: [id])
  rating    CallRatingStatus
  timestamp DateTime         @default(now())

  @@unique([callId, raterId, targetId])
  @@index([targetId])
  @@index([raterId])
}

model ReputationLog {
  id         String   @id @default(cuid())
  giverId    String
  receiverId String
  receiver   User     @relation(fields: [receiverId], references: [id])
  reason     String
  automatic  Boolean  @default(false)
  timestamp  DateTime @default(now())

  @@index([receiverId])
  @@index([giverId])
}
